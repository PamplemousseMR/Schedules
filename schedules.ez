\User declarations :

#include <utility>
#include <functional>

#include "Src/Teacher.hpp"
#include "Src/Room.hpp"
#include "Src/Subject.hpp"
#include "Src/Class.hpp"
#include "Src/Lesson.hpp"
#include "Src/Utility.hpp"

/* ---------------------------------------------------------------------------------
										Schedules
--------------------------------------------------------------------------------- */

static const unsigned short WEEK_BY_SEMESTER = 14;
static const unsigned short MAX_HOUR_PER_WEEK = 30;
static const unsigned short MAX_HOUR_PER_DAY = 6; 

typedef std::map< Lesson::LESSON_SLOT, std::vector< Lesson > > Day;
typedef std::map< Lesson::LESSON_DAY, Day > Week;
typedef std::map< int, Week > Schedules; 

static const std::vector< std::tuple< Subject::SUBJECT_MODALITY, const Subject&, const Class& > > s_MAP;

static const unsigned short s_STRONG_CONSTRAINT = 1000;
static const unsigned short s_MIDDLE_CONSTRAINT = 500;
static const unsigned short s_WEAK_CONSTRAINT = 1;

\end

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

\User functions:
\end

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

\User CUDA:
\end

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

\Before everything else function:

	auto& list = const_cast< std::vector< std::tuple< Subject::SUBJECT_MODALITY, const Subject&, const Class& > >& >(s_MAP);

	for(unsigned i = 0; i < Subject::s_subjects.size(); ++i) 
	{ 
		const Subject& subject = Subject::s_subjects[i]; 
		for(int modality = 0 ; modality < Subject::MODALITY_SIZE ; ++modality)
		{
			Subject::SUBJECT_MODALITY mod = static_cast< Subject::SUBJECT_MODALITY >(modality);
			float number = subject.m_modality.at(mod)/Lesson::SLOT_INTERVAL;
			Class::CLASS_YEAR _class;
			switch(subject.m_semester)
			{
				case Subject::S1 :
				case Subject::S2 :
					_class = Class::L0;
				case Subject::S3 :
				case Subject::S4 :
					_class = Class::L1;
				break;
			}
			switch(mod)
			{
				case Subject::CM : 
				case Subject::CI :
					if(subject.m_speciality == Subject::COMMUN) 
					{
						for(float j = 0.f; j < number; j++) 
						{ 
							list.emplace_back(mod, subject, std::get<0>(Class::s_classes).at(_class));
						}   
					}
					else
					{
						for(float j = 0.f; j < number; j++) 
						{ 
							list.emplace_back(mod, subject, std::get<1>(Class::s_classes).at(_class).at(static_cast< Class::CLASS_SPE >(subject.m_speciality))); 
						} 
					}
				break;
				case Subject::TD : 
					if(subject.m_speciality == Subject::COMMUN) 
					{
						for(unsigned spe = 0; spe < std::get<1>(Class::s_classes).at(_class).size() ; ++spe)
						{
							for(float j = 0.f; j < number; j++) 
							{ 
								list.emplace_back(mod, subject, std::get<1>(Class::s_classes).at(_class).at(static_cast< Class::CLASS_SPE >(spe))); 
							}  
						}
					}
					else
					{
						for(float j = 0.f; j < number; j++) 
						{ 
							list.emplace_back(mod, subject, std::get<1>(Class::s_classes).at(_class).at(static_cast< Class::CLASS_SPE >(subject.m_speciality))); 
						}  
					}
				break;
				case Subject::TP : 
					if(subject.m_speciality == Subject::COMMUN) 
					{
						for(unsigned spe = 0; spe < std::get<1>(Class::s_classes).at(_class).size() ; ++spe)
						{
							for(unsigned gr = 0; gr < std::get<2>(Class::s_classes).at(_class).at(static_cast< Class::CLASS_SPE >(spe)).size(); ++gr)
							{
								for(float j = 0.f; j < number; j++) 
								{ 
									list.emplace_back(mod, subject, std::get<2>(Class::s_classes).at(_class).at(static_cast< Class::CLASS_SPE >(spe)).at(static_cast< Class::CLASS_GROUP >(gr))); 
								}  
							} 
						}
					}
					else
					{
						for(unsigned gr = 0; gr < std::get<2>(Class::s_classes).at(_class).at(static_cast< Class::CLASS_SPE >(subject.m_speciality)).size(); ++gr)
						{
							for(float j = 0.f; j < number; j++) 
							{ 
								list.emplace_back(mod, subject, std::get<2>(Class::s_classes).at(_class).at(static_cast< Class::CLASS_SPE >(subject.m_speciality)).at(static_cast< Class::CLASS_GROUP >(gr))); 
							}  
						}   
					}	
				break;
				case Subject::MODALITY_SIZE :
				break;
			}
		}
	} 
	list = shuffleVector(list);

\end

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

\After everything else function:
\end

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

\At the beginning of each generation function:
\endstatic_

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

\At the end of each generation function:
\end

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

\At each generation before reduce function:
\end

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

\User classes :
	GenomeClass { 
		int* m_schedules;	// This is a HACK, it will be changed to void*.
	}
\end

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

\GenomeClass::display:
\end

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

\GenomeClass::initialiser:

	Schedules& schedules = *(new Schedules());

	for(const auto& tuple : shuffleVector(s_MAP))
	{
		const Subject::SUBJECT_MODALITY mod = std::get< 0 >(tuple);
		const Subject& sub = std::get< 1 >(tuple);
		const Class& classes = std::get< 2 >(tuple);
		int randWeek = random(0, WEEK_BY_SEMESTER);
		if(sub.m_semester == Subject::S2 || sub.m_semester == Subject::S4)
		{
			randWeek += WEEK_BY_SEMESTER;
		}
		const Lesson::LESSON_DAY randDay = static_cast< Lesson::LESSON_DAY >(random(0, Lesson::DAY_SIZE)); 
		const Lesson::LESSON_SLOT randSlot = static_cast< Lesson::LESSON_SLOT >(random(0, Lesson::SLOT_SIZE)); 

		schedules[randWeek][randDay][randSlot].emplace_back(sub, randTeacher(sub), randRoom(sub, mod), classes, mod);
	}

	Genome.m_schedules = &schedules;

\end

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

\GenomeClass::crossover:

	const Schedules& firstParentSchedules = *(Schedules*)parent1.m_schedules;
	const Schedules& secondParentSchedules = *(Schedules*)parent2.m_schedules;
	delete(static_cast< Schedules* >(child.m_schedules));

	Schedules* newChild = new Schedules();

	const bool randS1 = static_cast< bool >(random(0, 2));
	const bool randS2 = static_cast< bool >(random(0, 2));
	const bool randS3 = static_cast< bool >(random(0, 2));
	const bool randS4 = static_cast< bool >(random(0, 2));

	static auto getFromSemester = [&](unsigned short _week, const Schedules& _src, Subject::SUBJECT_SEMESTER _semester)	
	{	
		for(unsigned short _day = 0; _day < Lesson::DAY_SIZE; ++_day)
		{
			const Lesson::LESSON_DAY day = static_cast<Lesson::LESSON_DAY>(_day);
			for(unsigned short _slot = 0; _slot < Lesson::SLOT_SIZE; ++_slot)
			{		
				const Lesson::LESSON_SLOT slot = static_cast<Lesson::LESSON_SLOT>(_slot);
				if(_src.find(_week) != _src.end() &&
				 	_src.at(_week).find(day) != _src.at(_week).end() &&
				 	_src.at(_week).at(day).find(slot) != _src.at(_week).at(day).end())
				{
					for(const Lesson& les: _src.at(_week).at(day).at(slot))
					{
						if(les.m_subject->m_semester == _semester)
						{
							(*newChild)[_week][day][slot].push_back(les);
						}
					}
				}
			}
		}
	};

	for(unsigned short _week = 0; _week < WEEK_BY_SEMESTER; ++_week)
	{
		if(randS1)
		{
			getFromSemester(_week, firstParentSchedules, Subject::S1);
		}
		else
		{
			getFromSemester(_week, secondParentSchedules, Subject::S1);
		}

		if(randS3)
		{
			getFromSemester(_week, firstParentSchedules, Subject::S3);
		}
		else
		{
			getFromSemester(_week, secondParentSchedules, Subject::S3);
		}
	}

	for(unsigned short _week = WEEK_BY_SEMESTER; _week < WEEK_BY_SEMESTER*2; ++_week)
	{
		if(randS2)
		{
			getFromSemester(_week, firstParentSchedules, Subject::S2);
		}
		else
		{
			getFromSemester(_week, secondParentSchedules, Subject::S2);
		}

		if(randS4)
		{
			getFromSemester(_week, firstParentSchedules, Subject::S4);
		}
		else
		{
			getFromSemester(_week, secondParentSchedules, Subject::S4);
		}
	}

	child.m_schedules = static_cast< void* >(newChild);

\end

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

\GenomeClass::mutator:

  	Schedules& schedules = (*(Schedules*)Genome.m_schedules); 

  	const auto mutateLesson = [&](unsigned short _week, Lesson::LESSON_DAY _day, Lesson::LESSON_SLOT _slot)	
	{	
		std::vector< Lesson >& lessons = schedules.at(_week).at(_day).at(_slot); 

		const int rand = random(0, lessons.size());
		const Lesson& lesson = lessons[rand];

		const Lesson::LESSON_DAY randDay = static_cast< Lesson::LESSON_DAY >(random(0, Lesson::DAY_SIZE)); 
		const Lesson::LESSON_SLOT randSlot = static_cast< Lesson::LESSON_SLOT >(random(0, Lesson::SLOT_SIZE)); 
		int randWeek = 0;
		switch(lesson.m_subject->m_semester)
		{
			case Subject::S1 :
			case Subject::S2 :
				randWeek = random(0, WEEK_BY_SEMESTER);
			case Subject::S3 :
			case Subject::S4 :
				randWeek = random(WEEK_BY_SEMESTER, WEEK_BY_SEMESTER*2);
			break;
		}

		schedules[randWeek][randDay][randSlot].push_back(lesson);
		lessons.erase(lessons.begin()+rand);
	};

	const auto mutateTeacher = [&](unsigned short _week, Lesson::LESSON_DAY _day, Lesson::LESSON_SLOT _slot)	
	{	
		std::vector< Lesson >& lessons = schedules.at(_week).at(_day).at(_slot); 
		Lesson& lesson = lessons[random(0, lessons.size())];
		const Teacher& newTeacher = randTeacher(*lesson.m_subject);
	    lesson.m_teacher = &newTeacher;
	};

	const auto mutateRoom = [&](unsigned short _week, Lesson::LESSON_DAY _day, Lesson::LESSON_SLOT _slot)	
	{	
		std::vector< Lesson >& lessons = schedules.at(_week).at(_day).at(_slot); 
		Lesson& lesson = lessons[random(0, lessons.size())];
		const Room& newRoom = randRoom(*lesson.m_subject, lesson.m_modality);
	    lesson.m_room = &newRoom;
	};

	for(unsigned short week = 0; week < WEEK_BY_SEMESTER*2; ++week) 
  	{ 
		for(unsigned short _day = 0; _day < Lesson::DAY_SIZE; ++_day) 
		{ 
			const Lesson::LESSON_DAY day = static_cast< Lesson::LESSON_DAY >(_day); 
			for(unsigned short _slot = 0; _slot < Lesson::SLOT_SIZE; ++_slot) 
			{ 
				const Lesson::LESSON_SLOT slot = static_cast< Lesson::LESSON_SLOT >(_slot); 
				if(schedules.find(week) != schedules.end() &&
				 	schedules.at(week).find(day) != schedules.at(week).end() &&
				 	schedules.at(week).at(day).find(slot) != schedules.at(week).at(day).end())
				{
					if(tossCoin(schedules.at(week).at(day).at(slot).size()/s_MAP.size()))
					{
						const short rand = random(0,3);
						switch(rand)
						{
							case 0 :
								mutateLesson(week, day, slot);
							break;
							case 1 :
								mutateTeacher(week, day, slot);
							break;
							case 2 :
								mutateRoom(week, day, slot);
							break;
							default :
							break;
						}
					}
				}
			} 
		} 
	}

  	return 1;

\end

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

\GenomeClass::evaluator:
	Schedules* schedules = (Schedules*)Genome.m_schedules;
	long result = 0;
	std::map< unsigned, float > nbTotalTeacher;
	
	#pragma omp parallel for shared(schedules) reduction(+:result)
	for(unsigned short _week = 0; _week < WEEK_BY_SEMESTER*2; ++_week)
	{
		for(unsigned short _day = 0; _day < Lesson::DAY_SIZE; ++_day)
		{
			const Lesson::LESSON_DAY day = static_cast<Lesson::LESSON_DAY>(_day);
			const Teacher::TEACHERS_DAY tday = static_cast<Teacher::TEACHERS_DAY>(_day);
			std::map< unsigned, std::map< unsigned, unsigned > > nbCoursTeacher;
			std::map< unsigned, std::map< unsigned, unsigned > >  nbCoursClass;
			
			for(unsigned short _slot = 0; _slot < Lesson::SLOT_SIZE; ++_slot)
			{
				const Lesson::LESSON_SLOT slot = static_cast<Lesson::LESSON_SLOT>(_slot);
				const Teacher::TEACHERS_SLOT tslot = static_cast<Teacher::TEACHERS_SLOT>(_slot);
				int idx;
				
				//Tests des profs
				idx = 0;
				for(unsigned i=0 ; i<Teacher::TYPE_SIZE ; ++i)
				{
					for(const Teacher& teacher : Teacher::s_teachers.at(static_cast< Teacher::TEACHERS_TYPE >(i)))
					{
						++idx;
						const int count = countTeacher(teacher, (*schedules)[_week][day][slot]);
						if( count > 0)
						{
							nbCoursTeacher[idx][_slot]++;
							nbTotalTeacher[idx] += Lesson::SLOT_INTERVAL;
							if( count > 1)
							{
								result += s_STRONG_CONSTRAINT;
							}
							if(!teacher.m_availability.at(tday).at(tslot))
							{
								result += s_MIDDLE_CONSTRAINT;
							}
						}
					}
				}
				
				//Tests des salles
				for(unsigned i=0 ; i<Room::TYPE_SIZE ; ++i)
				{
					for(const Room& room : Room::s_rooms.at(static_cast< Room::ROOM_TYPE >(i)))
					{
						if(countRoom(room, (*schedules)[_week][day][slot]) > 1)
						{
							result += s_STRONG_CONSTRAINT;
						}
					}
				}
				
				//Tests des classes (relou)
				idx = 0 ;
				for(unsigned short _year=0 ; _year<Class::YEAR_SIZE; ++_year)
				{
					Class::CLASS_YEAR year = static_cast<Class::CLASS_YEAR>(_year);
					
					for(unsigned short _spe=0 ; _spe<Class::SPE_ALL; ++_spe)
					{
						const Class::CLASS_SPE spe = static_cast<Class::CLASS_SPE>(_spe);
						
						for(unsigned short _group=0 ; _group<Class::ALL; ++_group)
						{
							idx++;
							const int count = countClass(std::get<2>(Class::s_classes).at(year).at(spe).at(static_cast< Class::CLASS_GROUP >(_group)), (*schedules)[_week][day][slot]) 
											  + countClass(std::get<1>(Class::s_classes).at(year).at(spe), (*schedules)[_week][day][slot])
											  + countClass(std::get<0>(Class::s_classes).at(year), (*schedules)[_week][day][slot]);
							if( count > 0)
							{
								nbCoursClass[idx][_slot]++;
								if( count > 1)
								{
									result += s_STRONG_CONSTRAINT;
								}
							}
						}
					}
				}
			}
			
			for(unsigned i=0 ; i<Teacher::s_totalTeachers ; ++i)
			{
				const int count = nbCoursTeacher[i][Lesson::SLOT_0] + nbCoursTeacher[i][Lesson::SLOT_1] + nbCoursTeacher[i][Lesson::SLOT_2] + nbCoursTeacher[i][Lesson::SLOT_3];
				if (count){
					switch(count)
					{
						case 1 :
							result += s_WEAK_CONSTRAINT;
						break;
						case 2 :
							if( (nbCoursTeacher[i][Lesson::SLOT_0] && nbCoursTeacher[i][Lesson::SLOT_2])
							  ||(nbCoursTeacher[i][Lesson::SLOT_0] && nbCoursTeacher[i][Lesson::SLOT_3])
							  ||(nbCoursTeacher[i][Lesson::SLOT_1] && nbCoursTeacher[i][Lesson::SLOT_3]) )
							{
								result += s_WEAK_CONSTRAINT;
							}
						break;
						case 3 :
							if(!nbCoursTeacher[i][Lesson::SLOT_1] || !nbCoursTeacher[i][Lesson::SLOT_2])
							{
								result += s_WEAK_CONSTRAINT;
							}
						break;
						case 4 :
							result += s_WEAK_CONSTRAINT;
						break;
					}
				}
			}
			
			for(unsigned i=0 ; i<Class::s_totalGroupes ; ++i)
			{
				const int count = nbCoursClass[i][Lesson::SLOT_0] + nbCoursClass[i][Lesson::SLOT_1] + nbCoursClass[i][Lesson::SLOT_2] + nbCoursClass[i][Lesson::SLOT_3];
				if (count > 0){
					switch(count)
					{
						case 1 :
							result += s_WEAK_CONSTRAINT;
						break;
						case 2 :
							if( (nbCoursClass[i][Lesson::SLOT_0] && nbCoursClass[i][Lesson::SLOT_2])
							  ||(nbCoursClass[i][Lesson::SLOT_0] && nbCoursClass[i][Lesson::SLOT_3])
							  ||(nbCoursClass[i][Lesson::SLOT_1] && nbCoursClass[i][Lesson::SLOT_3]) )
							{
								result += s_WEAK_CONSTRAINT;
							}
						break;
						case 3 :
							if(!nbCoursClass[i][Lesson::SLOT_1] || !nbCoursClass[i][Lesson::SLOT_2])
							{
								result += s_WEAK_CONSTRAINT;
							}
						break;
						case 4 :
							result += s_WEAK_CONSTRAINT;
						break;
					}
				}
			}
		}
	}
	unsigned idx = 0;
	for(unsigned i=0 ; i<Teacher::TYPE_SIZE ; ++i)
	{
		for(const Teacher& teacher : Teacher::s_teachers.at(static_cast< Teacher::TEACHERS_TYPE >(i)))
		{
			++idx;
			switch(teacher.m_time)
			{
				case Teacher::FULL :
					result += std::abs(Teacher::s_nbHoursFull-nbTotalTeacher[idx])*s_STRONG_CONSTRAINT;
				break;
				case Teacher::HALF :
					result += std::abs(Teacher::s_nbHoursHalf-nbTotalTeacher[idx])*s_STRONG_CONSTRAINT;
				break;
				case Teacher::HOUR :
					result += nbTotalTeacher[idx]*s_MIDDLE_CONSTRAINT;
				break;
			}
		}
	}
	return result;
\end

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

\User Makefile options:
	CPPFLAGS += -std=c++11 -o3
\end

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

\Default run parameters :         // Please let the parameters appear in this order
Number of generations : 300       // NB_GEN
Time limit: 0                     // In seconds, 0 to deactivate
Population size : 1000           // POP_SIZE
Offspring size : 100%             // 40% 
Mutation probability : 1          // MUT_PROB
Crossover probability : 1         // XOVER_PROB
Evaluator goal : minimise         // Maximise
Selection operator: Tournament 2 
Surviving parents: 100%           // percentage or absolute
Surviving offspring: 100%
Reduce parents operator: Tournament 2
Reduce offspring operator: Tournament 2
Final reduce operator: Tournament 3

Elitism: Weak                     // Weak or Strong
Elite: 1
Print stats: true                 // Default: 1
Generate csv stats file:false
Generate gnuplot script:false
Generate R script:false
Plot stats:true                   // Default: 0

Remote island model: true
IP file: ipexplorer.txt           // File containing all the remote island's IP
Server port : 2929
Migration probability: 0.15       // 0.15 or 0.5

Save population: false
Start from file:false
\end
